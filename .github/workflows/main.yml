name: CI/CD Python Flask API

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  # –î–æ–±–∞–≤–ª—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask pytest flake8
      
      - name: Run code quality checks
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Validate application startup
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è..."
          python -c "import app"
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
          python -c "from app import app; assert '/health' in [rule.rule for rule in app.url_map.iter_rules()]"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        run: |
          echo "::set-output name=version::$(date +%Y%m%d%H%M%S)"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          else
            echo "::set-output name=tag::latest"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/flask-api:${{ steps.meta.outputs.tag }}
            ${{ secrets.DOCKER_USERNAME }}/flask-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ steps.meta.outputs.version }}

  deploy-notification:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Send deployment notification
        run: |
          echo "üëç CI/CD Pipeline —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
          echo "‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Docker Hub –∫–∞–∫ ${{ secrets.DOCKER_USERNAME }}/flask-api:latest"
          echo "üöÄ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${{ github.event.repository.updated_at }}"
